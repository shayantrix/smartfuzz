package controllers

import (
        "fmt"
	"bufio"
	"os"
        "net/http"
        "io"
        "strings"
        "log"
	"net/url"
        "golang.org/x/net/html"
)

func Fuzz(){
        fmt.Println("Fuzzing target ...")
}

func URLHandler (urlString string){
        // Sending a Get request; Having the response page HTML code
	u, err := url.Parse(urlString)
	if err != nil {
		fmt.Println("Error in URL string: ", err)
		return
	}

        resp, err := http.Get(u.String())
        if err != nil {
                fmt.Println("Error in handling the URL: ", err)
                return
        }

        defer resp.Body.Close()

        body, err := io.ReadAll(resp.Body)
        if err != nil{
                fmt.Println("Error in parsing the response body: ", err)
                return
        }
        // store html content 
        htmlContent := string(body)

        //html parsing to have html.Node
        doc, err := html.Parse(strings.NewReader(htmlContent))
        if err != nil{
                log.Fatal("Could not parse the html content: ", err)
        }

        //finding html element nodes
        var f func(*html.Node)
        f = func(n *html.Node){
                if n.Type == html.ElementNode && (n.Data == "input" || n.Data == "textarea" || n.Data == "form"){
                        fmt.Println("Found: ", n.Data)
                        for _, attr := range n.Attr{
                                fmt.Printf(" - %s = %s\n", attr.Key, attr.Val)
				if attr.Key == "name"{

                        }
                }
                for c := n.FirstChild ; c != nil ; c = c.NextSibling {
                        f(c)
		}
	}

	f(doc)

	//path := Payload("./payload.txt")
        file, err := os.Open("pkg/controllers/payload.txt")
        if err != nil {
                log.Fatal(err)
        }
        defer file.Close()

        scanner := bufio.NewScanner(file)
        // optionally, resize scanner's capacity for lines over 64K, see next example
        for scanner.Scan() {
                fmt.Println(scanner.Text())
        }

        if err := scanner.Err(); err != nil {
                log.Fatal(err)
        }


	}


}


//func Payload (path string) string{
//	return path
//}
